import { Profiler, useRef, useEffect } from "react";

/**
 * „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆöÁî®„ÅÆProfiler„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Åø„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÊôÇÈñì„ÇíÊ∏¨ÂÆö
 */
export const PerformanceProfiler = ({ id, children, onRender }) => {
    const handleRender = (
        id,
        phase,
        actualDuration,
        baseDuration,
        startTime,
        commitTime,
        interactions
    ) => {
        // ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Åø„É≠„Ç∞Âá∫Âäõ
        if (process.env.NODE_ENV === "development") {
            console.group(`üîç Performance: ${id}`);
            console.log(`Phase: ${phase}`);
            console.log(`Actual Duration: ${actualDuration.toFixed(2)}ms`);
            console.log(`Base Duration: ${baseDuration.toFixed(2)}ms`);
            console.log(`Start Time: ${startTime.toFixed(2)}ms`);
            console.log(`Commit Time: ${commitTime.toFixed(2)}ms`);
            console.groupEnd();
        }

        // „Ç´„Çπ„Çø„É†„Éè„É≥„Éâ„É©„Éº„Åå„ÅÇ„Çå„Å∞ÂÆüË°å
        if (onRender) {
            onRender(
                id,
                phase,
                actualDuration,
                baseDuration,
                startTime,
                commitTime,
                interactions
            );
        }
    };

    return (
        <Profiler id={id} onRender={handleRender}>
            {children}
        </Profiler>
    );
};

/**
 * HOCÂΩ¢Âºè„Åß„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö„ÇíËøΩÂä†
 */
export const withPerformanceProfiler = (WrappedComponent, profileId) => {
    return (props) => (
        <PerformanceProfiler id={profileId || WrappedComponent.name}>
            <WrappedComponent {...props} />
        </PerformanceProfiler>
    );
};

/**
 * „Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ„Åß„É¨„É≥„ÉÄ„É™„É≥„Ç∞ÂõûÊï∞„Çí„Ç´„Ç¶„É≥„Éà
 */
export const useRenderCount = (componentName) => {
    const renderCount = useRef(0);

    useEffect(() => {
        renderCount.current += 1;
        if (process.env.NODE_ENV === "development") {
            console.log(
                `üîÑ ${componentName} rendered ${renderCount.current} times`
            );
        }
    });

    return renderCount.current;
};

/**
 * „É°„É¢„É™‰ΩøÁî®Èáè„ÇíÁõ£Ë¶ñ„Åô„Çã„Éï„ÉÉ„ÇØ
 */
export const useMemoryMonitor = (componentName) => {
    useEffect(() => {
        if (process.env.NODE_ENV === "development" && "memory" in performance) {
            const memory = performance.memory;
            console.log(`üíæ ${componentName} Memory:`, {
                used: `${(memory.usedJSHeapSize / 1048576).toFixed(2)}MB`,
                total: `${(memory.totalJSHeapSize / 1048576).toFixed(2)}MB`,
                limit: `${(memory.jsHeapSizeLimit / 1048576).toFixed(2)}MB`,
            });
        }
    });
};

// ‰ΩøÁî®‰æã:
//
// // Profiler„Åß„É©„ÉÉ„Éó
// <PerformanceProfiler id="ServiceTypeForm">
//     <ServiceTypeForm />
// </PerformanceProfiler>
//
// // HOC„Å®„Åó„Å¶‰ΩøÁî®
// export default withPerformanceProfiler(ServiceTypeForm, 'ServiceTypeForm');
//
// // „Éï„ÉÉ„ÇØÂÜÖ„Åß‰ΩøÁî®
// const MyComponent = () => {
//     const renderCount = useRenderCount('MyComponent');
//     useMemoryMonitor('MyComponent');
//
//     return <div>Rendered {renderCount} times</div>;
// };
